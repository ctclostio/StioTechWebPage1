---
// ProofPoints Bar Component - Shows key investor metrics
---

<div class="proof-points-bar py-3 px-4" style="background: var(--cyber-bg-secondary); border-bottom: 1px solid var(--cyber-border);">
  <div class="max-w-7xl mx-auto">
    <div class="flex flex-wrap items-center justify-center gap-2 md:gap-6 text-sm md:text-base">
      <!-- Threat Detection -->
      <div class="flex items-center space-x-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: var(--cyber-green);">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
        <span class="font-medium text-gray-300">Rapid Response</span>
      </div>
      
      <!-- Security Level -->
      <div class="flex items-center space-x-2 border-l pl-4 md:pl-6" style="border-color: var(--cyber-border);">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: var(--cyber-cyan);">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
        </svg>
        <span class="font-medium text-gray-300">Enterprise Security</span>
      </div>
      
      <!-- Active Operations -->
      <div class="flex items-center space-x-2 border-l pl-4 md:pl-6" style="border-color: var(--cyber-border);">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: var(--cyber-purple);">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        </svg>
        <span class="font-medium text-gray-300">24/7 Operations</span>
      </div>
      
      <!-- Elite Status -->
      <div class="flex items-center space-x-2 border-l pl-4 md:pl-6" style="border-color: var(--cyber-border);">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: var(--cyber-red);">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
        <span class="font-medium px-2 py-1 text-xs md:text-sm" style="background: rgba(88, 166, 255, 0.1); border: 1px solid var(--cyber-green); color: var(--cyber-green);">Premium Partner</span>
      </div>
    </div>
  </div>
</div>

<style>
  .proof-points-bar {
    position: relative;
    z-index: 40;
    animation: slideDown 0.5s ease-out;
  }
  
  @keyframes slideDown {
    from {
      transform: translateY(-100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  
  /* Pulse animation for the Series A Ready badge */
  .proof-points-bar span:last-child {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }
  
  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .proof-points-bar {
      padding-top: 0.5rem;
      padding-bottom: 0.5rem;
    }
    
    .proof-points-bar > div > div {
      gap: 0.5rem;
    }
    
    .proof-points-bar svg {
      width: 1rem;
      height: 1rem;
    }
  }
</style>

<script>
  // Add subtle number counting animation
  document.addEventListener('DOMContentLoaded', () => {
    const arrElement = document.querySelector('.proof-points-bar span:contains("ARR")');
    const growthElement = document.querySelector('.proof-points-bar span:contains("Growth")');
    const clientsElement = document.querySelector('.proof-points-bar span:contains("Clients")');
    
    // Simple counter animation (optional enhancement)
    const animateValue = (element: Element | null, start: number, end: number, duration: number, suffix: string = '') => {
      if (!element) return;
      
      const range = end - start;
      const increment = end > start ? 1 : -1;
      const stepTime = Math.abs(Math.floor(duration / range));
      let current = start;
      
      const timer = setInterval(() => {
        current += increment;
        if (element.textContent) {
          element.textContent = current + suffix;
        }
        if (current === end) {
          clearInterval(timer);
        }
      }, stepTime);
    };
  });
</script>