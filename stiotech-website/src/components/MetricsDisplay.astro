---
---

<div class="metrics-display">
  <div class="metrics-item">
    <span class="metrics-label">FPS</span>
    <span class="metrics-value" id="fps-value">60</span>
  </div>
  <div class="metrics-item">
    <span class="metrics-label">CPU</span>
    <span class="metrics-value" id="cpu-value">0%</span>
  </div>
  <div class="metrics-item">
    <span class="metrics-label">MEM</span>
    <span class="metrics-value" id="mem-value">0MB</span>
  </div>
</div>

<style>
  .metrics-display {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: rgba(13, 17, 23, 0.9);
    border: 1px solid var(--cyber-border);
    border-radius: 8px;
    padding: 12px 16px;
    font-family: 'Fira Code', monospace;
    font-size: 12px;
    display: flex;
    gap: 16px;
    backdrop-filter: blur(10px);
    z-index: 100;
    opacity: 0.3;
    transition: opacity 0.3s;
  }
  
  .metrics-display:hover {
    opacity: 1;
  }
  
  .metrics-item {
    display: flex;
    align-items: center;
    gap: 6px;
  }
  
  .metrics-label {
    color: var(--cyber-text-muted);
  }
  
  .metrics-value {
    color: var(--cyber-green);
    font-weight: 600;
    min-width: 40px;
    text-align: right;
  }
  
  @media (max-width: 640px) {
    .metrics-display {
      display: none;
    }
  }
</style>

<script>
  const fpsElement = document.getElementById('fps-value');
  const cpuElement = document.getElementById('cpu-value');
  const memElement = document.getElementById('mem-value');
  
  // FPS Counter
  let lastTime = performance.now();
  let frames = 0;
  let fps = 60;
  
  function updateFPS() {
    frames++;
    const currentTime = performance.now();
    
    if (currentTime >= lastTime + 1000) {
      fps = Math.round((frames * 1000) / (currentTime - lastTime));
      if (fpsElement) fpsElement.textContent = fps.toString();
      frames = 0;
      lastTime = currentTime;
    }
    
    requestAnimationFrame(updateFPS);
  }
  
  // Memory Usage (if available)
  function updateMemory() {
    if ('memory' in performance) {
      const memory = (performance as any).memory;
      const used = Math.round(memory.usedJSHeapSize / 1048576);
      if (memElement) memElement.textContent = `${used}MB`;
    }
  }
  
  // Simulated CPU usage based on main thread blocking
  let cpuUsage = 0;
  function updateCPU() {
    const start = performance.now();
    // Intentionally block for a tiny amount to measure
    while (performance.now() - start < 1) {}
    const elapsed = performance.now() - start;
    cpuUsage = Math.min(100, Math.round(elapsed * 10));
    if (cpuElement) cpuElement.textContent = `${cpuUsage}%`;
  }
  
  // Start monitoring
  updateFPS();
  setInterval(updateMemory, 1000);
  setInterval(updateCPU, 2000);
</script>