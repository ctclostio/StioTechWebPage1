---
---

<canvas id="particles-canvas" class="absolute inset-0 w-full h-full"></canvas>

<script>
  const canvas = document.getElementById('particles-canvas') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d')!;
  
  let particles: Particle[] = [];
  let mouseX = 0;
  let mouseY = 0;
  
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  
  class Particle {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    opacity: number;
    
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.size = Math.random() * 2 + 0.5;
      this.speedX = Math.random() * 2 - 1;
      this.speedY = Math.random() * 2 - 1;
      this.opacity = Math.random() * 0.3 + 0.1;
    }
    
    update() {
      this.x += this.speedX;
      this.y += this.speedY;
      
      // Mouse interaction
      const dx = mouseX - this.x;
      const dy = mouseY - this.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      
      if (distance < 100) {
        const force = (100 - distance) / 100;
        this.x -= dx * force * 0.02;
        this.y -= dy * force * 0.02;
      }
      
      // Wrap around edges
      if (this.x > canvas.width) this.x = 0;
      if (this.x < 0) this.x = canvas.width;
      if (this.y > canvas.height) this.y = 0;
      if (this.y < 0) this.y = canvas.height;
    }
    
    draw() {
      const colors = ['0, 255, 65', '0, 240, 255', '189, 0, 255'];
      const color = colors[Math.floor(Math.random() * colors.length)];
      ctx.fillStyle = `rgba(${color}, ${this.opacity})`;
      ctx.shadowBlur = 5;
      ctx.shadowColor = `rgba(${color}, 0.2)`;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
      ctx.shadowBlur = 0;
    }
  }
  
  function init() {
    particles = [];
    const particleCount = Math.floor((canvas.width * canvas.height) / 8000);
    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle());
    }
  }
  
  function animate() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw connections
    particles.forEach((particle, i) => {
      particles.slice(i + 1).forEach(particle2 => {
        const dx = particle.x - particle2.x;
        const dy = particle.y - particle2.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 100) {
          ctx.strokeStyle = `rgba(88, 166, 255, ${0.1 * (1 - distance / 100)})`;
          ctx.lineWidth = 0.5;
          ctx.beginPath();
          ctx.moveTo(particle.x, particle.y);
          ctx.lineTo(particle2.x, particle2.y);
          ctx.stroke();
        }
      });
      
      particle.update();
      particle.draw();
    });
    
    requestAnimationFrame(animate);
  }
  
  window.addEventListener('resize', () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    init();
  });
  
  window.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    mouseX = e.clientX - rect.left;
    mouseY = e.clientY - rect.top;
  });
  
  init();
  animate();
</script>